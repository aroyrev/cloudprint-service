From 5975f5b7cb9171ba85b6eb1698b4da7c066d90ef Mon Sep 17 00:00:00 2001
From: David Steele <dsteele@gmail.com>
Date: Tue, 22 Oct 2013 22:01:29 -0400
Subject: [PATCH 22/29] Harden keepalive processing

The following pattern showed up in the logs:

Oct 21 18:12:21 debian-testing cloudprint.py: Polling for jobs on MFCJ5910DW
Oct 21 19:12:22 debian-testing cloudprint.py: Polling for jobs on MFC490CW
Oct 21 19:12:22 debian-testing cloudprint.py: Polling for jobs on MFCJ5910DW
Oct 21 19:31:53 debian-testing cloudprint.py: Sending XMPP keepalive
Oct 21 19:31:53 debian-testing cloudprint.py: ERROR: Could not Connect to Cloud Service. Will Try again in 60 Seconds
Oct 21 19:32:53 debian-testing cloudprint.py: Polling for jobs on MFC490CW
Oct 21 19:32:53 debian-testing cloudprint.py: Polling for jobs on MFCJ5910DW
Oct 21 19:32:54 debian-testing cloudprint.py: Establishing connection to xmpp server talk.google.com:5223
Oct 21 19:32:54 debian-testing cloudprint.py: ERROR: Could not Connect to Cloud Service. Will Try again in 60 Seconds
Oct 21 19:33:54 debian-testing cloudprint.py: Polling for jobs on MFC490CW
Oct 21 19:33:54 debian-testing cloudprint.py: Polling for jobs on MFCJ5910DW

keepalives are oddly rare (while set to 600 seconds). In this log,
the first keepalive was over a day in coming, and xmpp persistently failed
after the first keepalive attempt.

This commit has a number of changes to avoid problems with keepalive processing:
 - Initialize at class creation
 - Set to a valid number on close
 - Update early in the read/write routines.
---
 cloudprint/xmpp.py | 11 ++++++-----
 1 file changed, 6 insertions(+), 5 deletions(-)

diff --git a/cloudprint/xmpp.py b/cloudprint/xmpp.py
index 376dd6d..3f0e0e3 100644
--- a/cloudprint/xmpp.py
+++ b/cloudprint/xmpp.py
@@ -47,11 +47,13 @@ class XmppConnection(object):
         self._connected = False
         self._wrappedsock = None
         self._keepalive_period = keepalive_period
+        self._nextkeepalive = time.time() + self._keepalive_period
 
     def _read_socket(self):
         """read pending data from the socket, and send it to the XML parser.
         return False if the socket is closed, True if it is ok"""
         try:
+            self._nextkeepalive = time.time() + self._keepalive_period
             data = self._wrappedsock.recv(1024)
             if data is None or len(data) == 0:
                 # socket closed
@@ -61,15 +63,14 @@ class XmppConnection(object):
             raise
 
         LOGGER.debug('<<< %s' % data)
-        self._nextkeepalive = time.time() + self._keepalive_period
         self._xmlparser.feed(data)
 
     def _write_socket(self, msg):
         """write a message to the XMPP server"""
         LOGGER.debug('>>> %s' % msg)
         try:
-            self._wrappedsock.sendall(msg)
             self._nextkeepalive = time.time() + self._keepalive_period
+            self._wrappedsock.sendall(msg)
         except:
             self._connected = False
             raise
@@ -105,7 +106,7 @@ class XmppConnection(object):
         # first close any existing socket
         self.close()
 
-        LOGGER.info("Establishing connection to xmpp server %s:%i" % 
+        LOGGER.info("Establishing connection to xmpp server %s:%i" %
                     (host, port))
         self._xmppsock = socket.socket()
         self._wrappedsock = self._xmppsock
@@ -140,7 +141,7 @@ class XmppConnection(object):
             self._wrappedsock.close()
             self._wrappedsock = None
         self._connected = False
-        self._nextkeepalive = None
+        self._nextkeepalive = 0
 
 
     def is_connected(self):
@@ -176,7 +177,7 @@ class XmppConnection(object):
 
             if waittime < 0:
                 waittime = 0
-                    
+
             sock = self._xmppsock
             (r, w, e) = select.select([sock], [], [sock], waittime)
 
-- 
1.8.4.4

