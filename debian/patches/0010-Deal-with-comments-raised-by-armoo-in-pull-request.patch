From e82ee99cc1171d162192c0c8b90691059af6692b Mon Sep 17 00:00:00 2001
From: Richard van der Hoff <git@rvanderhoff.org.uk>
Date: Thu, 25 Jul 2013 08:01:57 +0100
Subject: [PATCH 10/20] Deal with comments raised by armoo in pull request:

* Create new logger for xmpp
* Put doc comments in the right place
* Fix method naming to be consistent with rest of code
---
 cloudprint/cloudprint.py |  6 ++--
 cloudprint/xmpp.py       | 87 ++++++++++++++++++++++++------------------------
 2 files changed, 46 insertions(+), 47 deletions(-)

diff --git a/cloudprint/cloudprint.py b/cloudprint/cloudprint.py
index b8dff08..d4ee469 100755
--- a/cloudprint/cloudprint.py
+++ b/cloudprint/cloudprint.py
@@ -350,7 +350,7 @@ def process_job(cups_connection, cpp, printer, job):
 
 def process_jobs(cups_connection, cpp, printers):
     xmpp_auth = file(cpp.xmpp_auth_path).read()
-    xmpp_conn = xmpp.XmppConnection(LOGGER)
+    xmpp_conn = xmpp.XmppConnection()
 
     while True:
         try:
@@ -359,11 +359,11 @@ def process_jobs(cups_connection, cpp, printers):
                     process_job(cups_connection, cpp, printer, job)
             sleeptime = POLL_PERIOD
 
-            if not xmpp_conn.isConnected():
+            if not xmpp_conn.is_connected():
                 xmpp_conn.connect(XMPP_SERVER_HOST,XMPP_SERVER_PORT,
                                   XMPP_USE_SSL,xmpp_auth)
 
-            xmpp_conn.awaitNotification(sleeptime)
+            xmpp_conn.await_notification(sleeptime)
 
         except Exception:
             LOGGER.exception('ERROR: Could not Connect to Cloud Service. Will Try again in 60 Seconds')
diff --git a/cloudprint/xmpp.py b/cloudprint/xmpp.py
index 35b5934..6ec0aaf 100644
--- a/cloudprint/xmpp.py
+++ b/cloudprint/xmpp.py
@@ -1,3 +1,4 @@
+import logging
 import ssl
 import socket
 import select
@@ -9,6 +10,8 @@ from xml.etree.ElementTree import XMLParser, TreeBuilder
 # frequency with which to send keepalives
 KEEPALIVE_PERIOD=60.0
 
+LOGGER = logging.getLogger('cloudprint.xmpp')
+
 class XmppXmlHandler(object):
     STREAM_TAG='{http://etherx.jabber.org/streams}stream'
 
@@ -17,7 +20,7 @@ class XmppXmlHandler(object):
         self._builder = TreeBuilder()
         self._results = deque()
 
-    def data(self,data):
+    def data(self, data):
         self._builder.data(data)
 
     def start(self, tag, attrib):
@@ -34,24 +37,22 @@ class XmppXmlHandler(object):
         if self._stack == 0:
             self._results.append(elem)
 
-    """If a top-level XML element has been completed since the last call to
-    getElem, return it; else return None."""
-    def getElem(self):
+    def get_elem(self):
+        """If a top-level XML element has been completed since the last call to
+        get_elem, return it; else return None."""
         try:
             return self._results.popleft()
         except IndexError:
             return None
 
 class XmppConnection(object):
-    def __init__(self, LOGGER):
+    def __init__(self):
         self._connected = False
         self._wrappedsock = None
-        self._LOGGER = LOGGER
-
-    """read pending data from the socket, and send it to the XML parser.
 
-    return False if the socket is closed, True if it is ok"""
-    def _readSocket(self):
+    def _read_socket(self):
+        """read pending data from the socket, and send it to the XML parser.
+        return False if the socket is closed, True if it is ok"""
         try:
             data = self._wrappedsock.recv(1024)
             if data is None or len(data) == 0:
@@ -61,13 +62,13 @@ class XmppConnection(object):
             self._conected = False
             raise
 
-        self._LOGGER.debug('<<< %s' % data)
+        LOGGER.debug('<<< %s' % data)
         self._nextkeepalive = time.time() + KEEPALIVE_PERIOD
         self._xmlparser.feed(data)
 
-    """write a message to the XMPP server"""
-    def _writeSocket(self,msg):
-        self._LOGGER.debug('>>> %s' % msg)
+    def _write_socket(self, msg):
+        """write a message to the XMPP server"""
+        LOGGER.debug('>>> %s' % msg)
         try:
             self._wrappedsock.sendall(msg)
             self._nextkeepalive = time.time() + KEEPALIVE_PERIOD
@@ -75,39 +76,38 @@ class XmppConnection(object):
             self._conected = False
             raise
 
-    """send a message to the XMPP server, and wait for a response
-
-    returns the XML element tree of the response"""
-    def _msg(self,msg=None):
+    def _msg(self, msg=None):
+        """send a message to the XMPP server, and wait for a response
+        returns the XML element tree of the response"""
         if msg is not None:
-            self._writeSocket(msg)
+            self._write_socket(msg)
 
         while True:
-            elem = self._handler.getElem()
+            elem = self._handler.get_elem()
 
             if elem is not None:
                 assert not elem.tag.endswith('failure') and not elem.tag.endswith('error')
                 return elem
 
             # need more data; block until it becomes available
-            self._readSocket()
+            self._read_socket()
 
 
-    """Check for any notifications which have already been received"""
-    def _checkForNotification(self):
-        return self._handler.getElem() is not None
+    def _check_for_notification(self):
+        """Check for any notifications which have already been received"""
+        return self._handler.get_elem() is not None
 
-    def _sendKeepAlive(self):
-        self._LOGGER.info("Sending XMPP keepalive")
-        self._writeSocket(" ")
+    def _send_keepalive(self):
+        LOGGER.info("Sending XMPP keepalive")
+        self._write_socket(" ")
 
 
-    """Establish a new connection to the XMPP server"""
-    def connect(self,host,port,use_ssl,sasl_token):
+    def connect(self, host, port, use_ssl, sasl_token):
+        """Establish a new connection to the XMPP server"""
         # first close any existing socket
         self.close()
 
-        self._LOGGER.info("Establishing connection to xmpp server %s:%i" % 
+        LOGGER.info("Establishing connection to xmpp server %s:%i" % 
                     (host, port))
         self._xmppsock = socket.socket()
         self._wrappedsock = self._xmppsock
@@ -131,12 +131,12 @@ class XmppConnection(object):
             self.close()
             raise
 
-        self._LOGGER.info("xmpp connection established")
+        LOGGER.info("xmpp connection established")
         self._connected = True
 
 
-    """Close the connection to the XMPP server"""
     def close(self):
+        """Close the connection to the XMPP server"""
         if self._wrappedsock is not None:
             self._wrappedsock.close()
             self._wrappedsock = None
@@ -144,15 +144,14 @@ class XmppConnection(object):
         self._nextkeepalive = None
 
 
-    """Check if we are connected to the XMPP server
-
-    returns true if the connection is active; false otherwise"""
-    def isConnected(self):
+    def is_connected(self):
+        """Check if we are connected to the XMPP server
+        returns true if the connection is active; false otherwise"""
         return self._connected
 
 
-    """wait for a timeout or event notification"""
-    def awaitNotification(self, timeout):
+    def await_notification(self, timeout):
+        """wait for a timeout or event notification"""
         now = time.time()
 
         timeoutend = None
@@ -160,7 +159,7 @@ class XmppConnection(object):
             timeoutend = now + timeout
 
         while True:
-            if self._checkForNotification():
+            if self._check_for_notification():
                 return True
 
             if timeoutend is not None and timeoutend - now <= 0:
@@ -168,13 +167,13 @@ class XmppConnection(object):
                 return False
 
             waittime = self._nextkeepalive - now
-            self._LOGGER.debug("%f seconds until next keepalive" % waittime)
+            LOGGER.debug("%f seconds until next keepalive" % waittime)
 
             if timeoutend is not None:
                 remaining = timeoutend - now
                 if remaining < waittime:
                     waittime = remaining
-                    self._LOGGER.debug("%f seconds until timeout" % waittime)
+                    LOGGER.debug("%f seconds until timeout" % waittime)
 
             if waittime < 0:
                 waittime = 0
@@ -186,13 +185,13 @@ class XmppConnection(object):
 
             try:
                 if self._nextkeepalive - now <= 0:
-                    self._sendKeepAlive()
+                    self._send_keepalive()
 
                 if sock in r:
-                    self._readSocket()
+                    self._read_socket()
 
                 if sock in e:
-                    self._LOGGER.warn("Error in xmpp connection")
+                    LOGGER.warn("Error in xmpp connection")
                     raise Exception("xmpp connection errror")
 
             except Exception:
-- 
1.8.4.rc3

