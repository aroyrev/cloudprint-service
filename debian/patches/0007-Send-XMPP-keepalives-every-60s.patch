From 256e3b8e79a3b06594991699761b4802e8316bdc Mon Sep 17 00:00:00 2001
From: Richard van der Hoff <git@rvanderhoff.org.uk>
Date: Mon, 25 Mar 2013 22:06:06 +0000
Subject: [PATCH 07/20] Send XMPP keepalives every 60s

---
 cloudprint/cloudprint.py |   3 +-
 cloudprint/xmpp.py       | 133 +++++++++++++++++++++++++++++++----------------
 2 files changed, 90 insertions(+), 46 deletions(-)

diff --git a/cloudprint/cloudprint.py b/cloudprint/cloudprint.py
index b4562aa..e5ec92b 100755
--- a/cloudprint/cloudprint.py
+++ b/cloudprint/cloudprint.py
@@ -35,6 +35,7 @@ POLL_PERIOD=30.0
 
 LOGGER = logging.getLogger('cloudprint')
 LOGGER.setLevel(logging.INFO)
+#LOGGER.setLevel(logging.DEBUG)
 
 class CloudPrintProxy(object):
 
@@ -367,7 +368,7 @@ def process_jobs(cups_connection, cpp, printers):
 
             xmpp_conn.awaitNotification(sleeptime)
 
-        except Exception, e:
+        except Exception:
             LOGGER.exception('ERROR: Could not Connect to Cloud Service. Will Try again in 60 Seconds')
             time.sleep(60)
 
diff --git a/cloudprint/xmpp.py b/cloudprint/xmpp.py
index 49c45cd..e682c4c 100644
--- a/cloudprint/xmpp.py
+++ b/cloudprint/xmpp.py
@@ -1,9 +1,14 @@
 import ssl
 import socket
 import select
+import time
+
 from collections import deque
 from xml.etree.ElementTree import XMLParser, TreeBuilder
 
+# frequency with which to send keepalives
+KEEPALIVE_PERIOD=60.0
+
 class XmppXmlHandler(object):
     STREAM_TAG='{http://etherx.jabber.org/streams}stream'
 
@@ -37,7 +42,6 @@ class XmppXmlHandler(object):
         except IndexError:
             return None
 
-# https://developers.google.com/cloud-print/docs/rawxmpp
 class XmppConnection(object):
     def __init__(self, LOGGER):
         self._connected = False
@@ -48,20 +52,28 @@ class XmppConnection(object):
 
     return False if the socket is closed, True if it is ok"""
     def _readSocket(self):
-        data = self._wrappedsock.recv(1024)
-        if not data:
-            # socket closed
-            return False
-        else:
-            self._LOGGER.debug('<<< %s' % data)
-            self._xmlparser.feed(data)
-            return True
+        try:
+            data = self._wrappedsock.recv(1024)
+            if data is None or len(data) == 0:
+                # socket closed
+                raise Exception("xmpp socket closed")
+        except Exception:
+            self._conected = False
+            raise
+
+        self._LOGGER.debug('<<< %s' % data)
+        self._nextkeepalive = time.time() + KEEPALIVE_PERIOD
+        self._xmlparser.feed(data)
 
     """write a message to the XMPP server"""
     def _writeSocket(self,msg):
         self._LOGGER.debug('>>> %s' % msg)
-        self._wrappedsock.send(msg)
-
+        try:
+            self._wrappedsock.sendall(msg)
+            self._nextkeepalive = time.time() + KEEPALIVE_PERIOD
+        except Exception:
+            self._conected = False
+            raise
 
     """send a message to the XMPP server, and wait for a response
 
@@ -78,15 +90,17 @@ class XmppConnection(object):
                 return elem
 
             # need more data; block until it becomes available
-            if not self._readSocket():
-                self.close()
-                raise Error("socket closed while negotiating connection")
+            self._readSocket()
 
 
     """Check for any notifications which have already been received"""
     def _checkForNotification(self):
         return self._handler.getElem() is not None
 
+    def _sendKeepAlive(self):
+        self._LOGGER.info("Sending XMPP keepalive")
+        self._writeSocket(" ")
+
 
     """Establish a new connection to the XMPP server"""
     def connect(self,host,port,use_ssl,sasl_token):
@@ -96,21 +110,26 @@ class XmppConnection(object):
         self._LOGGER.info("Establishing connection to xmpp server %s:%i" % 
                     (host, port))
         self._xmppsock = socket.socket()
-        if use_ssl:
-            self._wrappedsock = ssl.wrap_socket(self._xmppsock)
-        else:
-            self._wrappedsock = self._xmppsock
-        self._wrappedsock.connect((host, port))
-
-        self._handler = XmppXmlHandler()
-        self._xmlparser = XMLParser(target=self._handler)
-
-        self._msg('<stream to="gmail.com" version="1.0" xmlns="http://etherx.jabber.org/streams">')
-        self._msg('<auth xmlns="urn:ietf:params:xml:ns:xmpp-sasl" mechanism="X-GOOGLE-TOKEN">%s</auth>' % sasl_token)
-        self._msg('<s:stream to="gmail.com" version="1.0" xmlns:s="http://etherx.jabber.org/streams" xmlns="jabber:client">')
-        iq = self._msg('<iq type="set"><bind xmlns="urn:ietf:params:xml:ns:xmpp-bind"><resource>Armooo</resource></bind></iq>')
-        bare_jid = iq[0][0].text.split('/')[0]
-        self._msg('<iq type="set" to="%s"><subscribe xmlns="google:push"><item channel="cloudprint.google.com" from="cloudprint.google.com"/></subscribe></iq>' % bare_jid)
+        self._wrappedsock = self._xmppsock
+
+        try:
+            if use_ssl:
+                self._wrappedsock = ssl.wrap_socket(self._xmppsock)
+            self._wrappedsock.connect((host, port))
+
+            self._handler = XmppXmlHandler()
+            self._xmlparser = XMLParser(target=self._handler)
+
+            # https://developers.google.com/cloud-print/docs/rawxmpp
+            self._msg('<stream to="gmail.com" version="1.0" xmlns="http://etherx.jabber.org/streams">')
+            self._msg('<auth xmlns="urn:ietf:params:xml:ns:xmpp-sasl" mechanism="X-GOOGLE-TOKEN">%s</auth>' % sasl_token)
+            self._msg('<s:stream to="gmail.com" version="1.0" xmlns:s="http://etherx.jabber.org/streams" xmlns="jabber:client">')
+            iq = self._msg('<iq type="set"><bind xmlns="urn:ietf:params:xml:ns:xmpp-bind"><resource>Armooo</resource></bind></iq>')
+            bare_jid = iq[0][0].text.split('/')[0]
+            self._msg('<iq type="set" to="%s"><subscribe xmlns="google:push"><item channel="cloudprint.google.com" from="cloudprint.google.com"/></subscribe></iq>' % bare_jid)
+        except Exception:
+            self.close()
+            raise
 
         self._LOGGER.info("xmpp connection established")
         self._connected = True
@@ -122,6 +141,7 @@ class XmppConnection(object):
             self._wrappedsock.close()
             self._wrappedsock = None
         self._connected = False
+        self._nextkeepalive = None
 
 
     """Check if we are connected to the XMPP server
@@ -133,23 +153,46 @@ class XmppConnection(object):
 
     """wait for a timeout or event notification"""
     def awaitNotification(self, timeout):
-        if self._checkForNotification():
-            return
+        now = time.time()
 
-        sock = self._xmppsock
-        r, w, e = select.select([sock], [], [sock], timeout)
-        ok = True
-        if sock in r:
-            ok = self._readSocket()
+        timeoutend = None
+        if timeout is not None:
+            timeoutend = now + timeout
 
-        if (not ok) or sock in e:
-            self._LOGGER.warn("Error in xmpp connection")
-            self.close()
-            return
+        while True:
+            if self._checkForNotification():
+                return True
+
+            if timeoutend is not None and timeoutend - now <= 0:
+                # timeout
+                return False
+
+            waittime = self._nextkeepalive - now
+            self._LOGGER.debug("%f seconds until next keepalive" % waittime)
+
+            if timeoutend is not None:
+                remaining = timeoutend - now
+                if remaining < waittime:
+                    waittime = remaining
+                    self._LOGGER.debug("%f seconds until timeout" % waittime)
+
+            sock = self._xmppsock
+            (r, w, e) = select.select([sock], [], [sock], waittime)
 
-        # for now at least, we don't distinguish between a timeout and a
-        # notification. ultimately we might return something different here if
-        # we get a notification
-        self._checkForNotification()
+            now = time.time()
+
+            try:
+                if self._nextkeepalive - now <= 0:
+                    self._sendKeepAlive()
+
+                if sock in r:
+                    self._readSocket()
+
+                if sock in e:
+                    self._LOGGER.warn("Error in xmpp connection")
+                    raise Exception("xmpp connection errror")
+
+            except Exception:
+                self.close()
+                raise
 
-        return
-- 
1.8.4.rc3

