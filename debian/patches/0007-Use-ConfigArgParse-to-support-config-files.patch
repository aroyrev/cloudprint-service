From: David Steele <dsteele@gmail.com>
Date: Mon, 21 Sep 2015 22:49:44 -0400
Subject: Use ConfigArgParse to support config files

Need to resurrect fast poll, include/exclude, and others of that ilk.
---
 cloudprint/cloudprint.py | 91 +++++++++++++++++++++++++++++++++++++-----------
 setup.py                 |  1 +
 2 files changed, 71 insertions(+), 21 deletions(-)

diff --git a/cloudprint/cloudprint.py b/cloudprint/cloudprint.py
index 7bb6969..c76f703 100755
--- a/cloudprint/cloudprint.py
+++ b/cloudprint/cloudprint.py
@@ -16,7 +16,7 @@
 # You should have received a copy of the GNU General Public License
 # along with cloudprint.  If not, see <http://www.gnu.org/licenses/>.
 
-import argparse
+import configargparse
 import cups
 import datetime
 import hashlib
@@ -423,27 +423,76 @@ def process_jobs(cups_connection, cpp):
             time.sleep(FAIL_RETRY)
 
 
+def parse_args():
+    parser = configargparse.ArgParser(
+        default_config_files=['/etc/cloudprint.conf',
+                              '~/.cloudprint.conf'],
+    )
+    parser.add_argument(
+        '-d', '--daemon',
+        dest='daemon',
+        action='store_true',
+        help='enable daemon mode (requires the daemon module)',
+    )
+    parser.add_argument(
+        '-l', '--logout',
+        dest='logout',
+        action='store_true',
+        help='logout of the google account',
+    )
+    parser.add_argument(
+        '-p', '--pidfile',
+        metavar='pid_file',
+        dest='pidfile',
+        default='cloudprint.pid',
+        help='path to write the pid to (default %(default)s)',
+    )
+    parser.add_argument(
+        '-a', '--account_file',
+        metavar='account_file',
+        dest='authfile',
+        default=os.path.expanduser('~/.cloudprintauth.json'),
+        help='path to google account ident data (default %(default)s)',
+    )
+    parser.add_argument(
+        '-c', '--credentials',
+        dest='authonly',
+        action='store_true',
+        help='establish and store login credentials, then exit',
+    )
+    parser.add_argument(
+        '-f', '--fastpoll',
+        dest='fastpoll',
+        action='store_true',
+        help='use fast poll if notifications are not working',
+    )
+    parser.add_argument(
+        '-i', '--include',
+        metavar='regexp',
+        dest='include',
+        default=[],
+        action='append',
+        help='include local printers matching %(metavar)s',
+    )
+    parser.add_argument(
+        '-x', '--exclude',
+        metavar='regexp',
+        dest='exclude',
+        default=[],
+        action='append',
+        help='exclude local printers matching %(metavar)s',
+    )
+    parser.add_argument(
+        '-v', '--verbose',
+        dest='verbose',
+        action='store_true',
+        help='verbose logging',
+    )
+    return parser.parse_args()
+
+
 def main():
-    parser = argparse.ArgumentParser()
-    parser.add_argument('-d', dest='daemon', action='store_true',
-                        help='enable daemon mode (requires the daemon module)')
-    parser.add_argument('-l', dest='logout', action='store_true',
-                        help='logout of the google account')
-    parser.add_argument('-p', metavar='pid_file', dest='pidfile', default='cloudprint.pid',
-                        help='path to write the pid to (default %(default)s)')
-    parser.add_argument('-a', metavar='account_file', dest='authfile', default=os.path.expanduser('~/.cloudprintauth.json'),
-                        help='path to google account ident data (default %(default)s)')
-    parser.add_argument('-c', dest='authonly', action='store_true',
-                        help='establish and store login credentials, then exit')
-    parser.add_argument('-f', dest='fastpoll', action='store_true',
-                        help='use fast poll if notifications are not working')
-    parser.add_argument('-i', metavar='regexp', dest='include', default=[], action='append',
-                        help='include local printers matching %(metavar)s')
-    parser.add_argument('-x', metavar='regexp', dest='exclude', default=[], action='append',
-                        help='exclude local printers matching %(metavar)s')
-    parser.add_argument('-v', dest='verbose', action='store_true',
-                        help='verbose logging')
-    args = parser.parse_args()
+    args = parse_args()
 
     # if daemon, log to syslog, otherwise log to stdout
     if args.daemon:
diff --git a/setup.py b/setup.py
index 6a55d80..d2a871b 100644
--- a/setup.py
+++ b/setup.py
@@ -31,6 +31,7 @@ setup(
     install_requires=[
         'requests',
         'pycups',
+        'config-argparse',
     ],
     extras_require={
         'daemon': ['python-daemon < 2.0.0'],
